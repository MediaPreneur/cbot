#!/usr/local/bin/python3
import os
import openai
import json
import sys    
import shelve 


openai.api_key = os.getenv("OPENAI_API_KEY")
# The recommended approach is to set the API_Key in an environmental
# variable. If you don't want to set that up, you can uncomment this
# line and add your key directly. 
# openai.api_key = "st-key-goes-here"

# Detect the platform. This helps with platform specific paths
# and system specific options for certain commands
platform = sys.platform
if platform == "linux" or platform == "linux2":
    platform = "Linux"
elif platform == "darwin":
    platform = "Mac"
elif platform == "win32":
    platform = "Windows"
else:
    platform = "Linux"


start_sequence = ""
restart_sequence = "\nQ: "
if sys.argv[1] == "-x" :
    execute = True
    question = sys.argv[2]
else:
    execute = False
    question = sys.argv[1]

prompt="I am a command line translation tool for "+ platform +". Ask me what you want to do and I will tell you how to do it in a unix command. \nQ: How do I copy a file?\ncp filename.txt destination_filename.txt\nQ: How do display a calendar?\ncal\nQ: How do I find files that contain the word \"test\"?\ngrep -i test *\nQ:" + question + "\n"


# We locally cache results to lower GPT3 costs and speed up answers
# If we change our training/prompts, just delete the cache and it'll 
# be recreated on future runs. 
from os.path import expanduser
home = expanduser("~")
cache = shelve.open(home + "/.cbot_cache") 

if not(cache.get(question)):
    response = openai.Completion.create(
            engine="davinci",
            prompt=prompt,
            temperature=0,
            max_tokens=100,
            top_p=1,
            frequency_penalty=0,
            presence_penalty=0,
            stop=["\n"]
            )
    jsonToPython = json.loads(response.last_response.body)
    result = jsonToPython['choices'][0]['text']
    cache[question] = result
else:
    result = cache.get(question)
    print("ðŸ’¾ Cache Hit")

cache.close()
if execute:
    print("cbot executing: " + result) 
    if ("sudo" in result):
        print("Execution canceled, cbot will not execute sudo commands.")
    else:
        result = os.system(result)
else:
    print(result)

