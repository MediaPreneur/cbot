#!/usr/bin/env python3
import os
import openai
import json
import sys    
import sqlite3 
import pyperclip

openai.api_key = os.getenv("OPENAI_API_KEY")
# The recommended approach is to set the API_Key in an environmental
# variable. If you don't want to set that up, you can uncomment this
# line and add your key directly. 
# openai.api_key = "st-key-goes-here"

def initDB():
  global cache 
  cache = sqlite3.connect(home + "/.cbot_cache") 
  cache.execute("""
                   CREATE TABLE IF NOT EXISTS questions 
                   (id INTEGER PRIMARY KEY,
                   question TEXT,
                   answer TEXT,
                   count INTEGER DEFAULT 1)""")
def closeDB():
    cache.commit()
    cache.close()

def checkQ(question_text):
    answer = cache.execute("SELECT id,answer,count FROM questions WHERE question = ?", (question_text,))
    answer = answer.fetchone()
    if (answer) :
        response = answer[1]
        newcount = int(answer[2]) + 1
        counter = cache.execute(" UPDATE questions SET count = ? WHERE id = ?", (newcount,answer[0]))
        return(response)
    else:
        return(False)


def insertQ(question_text,answer_text):
    answer = cache.execute("DELETE FROM questions WHERE question = ?",(question_text,))
    answer = cache.execute("INSERT INTO questions (question,answer) VALUES (?,?)", (question_text,answer_text))


# Detect the platform. This helps with platform specific paths
# and system specific options for certain commands
platform = sys.platform
if platform == "darwin":
    platform = "Mac"
elif platform == "win32":
    platform = "Windows"
else:
    platform = "Linux"

global question
global shortcut
question = ""
shortcut = False

# Read the command options
# [cbot,-x,  What,is,the,date]  # execute the response
# [cbot,What,is, the,date]      # no quotes will work
# [cbot,What is the date]       # with quotes will work

for a in range(1,len(sys.argv)):
        question = question + " " + sys.argv[a]


# Read command line options
execute = False
clip = False

if ("-x" in question):      # Execute the command
    execute = True
    question = question.replace("-x ","") 
   
if ("-c" in question):      # Copy the command to clipboard
    clip = True
    question = question.replace("-c ","") 

if ("-s" in question):         # Save the command as a shortcut  
    question=sys.argv[2]
    shortcut = sys.argv[3]

question = question.strip()

# If we change our training/prompts, just delete the cache and it'll 
# be recreated on future runs. 
from os.path import expanduser
home = expanduser("~")
start_sequence = "\nQ: "
initDB()

#check if we're saving a shortcut
#then check if there's an aswer in our cache
#then execute a GPT3 request as needed

if (shortcut):
    insertQ(question,shortcut)
    print("Saving Shortcut:" + question + " Will return:" +shortcut)
    cache_answer = False 
else:
    cache_answer = checkQ(question)

if not(cache_answer) and not(shortcut):
    if not("?" in question):
        question = question + "?"  # GPT produces better results if there's a question mark.
        prompt="I am a command line translation tool for "+ platform +". Ask me what you want to do and I will tell you how to do it in a unix command. \nQ: How do I copy a file\ncp filename.txt destination_filename.txt\nQ: How do display a calendar?\ncal\nQ: How do I find files that contain the word \"test\"?\ngrep -i test *\nQ:" + question + "\n"
        response = openai.Completion.create(
            engine="davinci",
            prompt=prompt,
            temperature=0,
            max_tokens=100,
            top_p=1,
            frequency_penalty=0,
            presence_penalty=0,
            stop=["\n"]
            )
    jsonToPython = json.loads(response.last_response.body)
    result = jsonToPython['choices'][0]['text']
    insertQ(question, result) 
else:
    result = cache_answer 
    if not(shortcut):
        print("ðŸ’¾ Cache Hit")

if clip:
    pyperclip.copy(result)
if execute:
    print("cbot executing: " + result) 
    if ("sudo" in result):
        print("Execution canceled, cbot will not execute sudo commands.")
    else:
        result = os.system(result)
else:
    if not(shortcut):
        print(result)

closeDB()
